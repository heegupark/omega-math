{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { BiHomeAlt } from 'react-icons/bi';\nimport CountUp from 'react-countup';\nimport { Flex, Button, Box, Stack, Input, useToast, Modal, ModalContent, ModalBody, useDisclosure, Badge, Slider, SliderTrack, SliderFilledTrack, SliderThumb } from '@chakra-ui/core';\nexport default function Play(props) {\n  const {\n    0: number1,\n    1: setNumber1\n  } = useState(1);\n  const {\n    0: number2,\n    1: setNumber2\n  } = useState(2);\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: input,\n    1: setInput\n  } = useState('');\n  const {\n    0: answer,\n    1: setAnswer\n  } = useState(0);\n  const {\n    0: prevAnswers,\n    1: setPrevAnswers\n  } = useState([]);\n  const {\n    0: score,\n    1: setScore\n  } = useState(0);\n  const {\n    0: highscore,\n    1: setHighscore\n  } = useState(0);\n  const {\n    0: isResetting,\n    1: setIsResetting\n  } = useState(false);\n  const {\n    0: symbol,\n    1: setSymbol\n  } = useState('+');\n  const {\n    0: time,\n    1: setTime\n  } = useState(100);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: modalCategory,\n    1: setModalCategory\n  } = useState('ready');\n  const toast = useToast();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure(true);\n  const prevAnsDisplayNumber = 5;\n\n  const generateNumbers = () => {\n    setIsResetting(false);\n    const num1 = Math.floor(Math.random() * level * 2 + 1);\n    const num2 = Math.floor(Math.random() * (level + 1) * 2 + 1);\n    setNumber1(num1);\n    setNumber2(num2);\n\n    switch (props.mode) {\n      case 'add':\n        setNumber1(num1);\n        setNumber2(num2);\n        setAnswer(num1 + num2);\n        break;\n\n      case 'subtract':\n        if (num2 > num1) {\n          setNumber1(num2);\n          setNumber2(num1);\n          setAnswer(num2 - num1);\n        } else {\n          setNumber1(num1);\n          setNumber2(num2);\n          setAnswer(num1 - num2);\n        }\n\n        break;\n\n      case 'multiply':\n        setAnswer(num1 * num2);\n        break;\n\n      case 'divide':\n        setNumber1(num1 * num2);\n        setNumber2(num2);\n        setAnswer(num1);\n        break;\n\n      default:\n        setNumber1(num1);\n        setNumber2(num2);\n        setAnswer(num1 + num2);\n        break;\n    }\n\n    setIsResetting(true);\n  };\n\n  useEffect(() => {\n    switch (props.mode) {\n      case 'add':\n        setSymbol('+');\n        break;\n\n      case 'subtract':\n        setSymbol('-');\n        break;\n\n      case 'multiply':\n        setSymbol('×');\n        break;\n\n      case 'divide':\n        setSymbol('÷');\n        break;\n\n      default:\n        setSymbol('+');\n        break;\n    }\n  }, []);\n\n  const handleKeyDown = e => {\n    if (Number(e.key) >= 0 && Number(e.key) <= 9) {\n      handleChange(e);\n    }\n  };\n\n  useEffect(() => {\n    getHighscore(props.mode);\n  }, []);\n  useEffect(() => {\n    let timer = null;\n\n    if (isActive) {\n      timer = setInterval(() => {\n        if (time > 0) setTime(time - 0.1);\n\n        if (time <= 0) {\n          setTime(0);\n          gameOver();\n          clearInterval(timer);\n        }\n      }, 10);\n    } else if (!isActive && time !== 0) {\n      clearInterval(timer);\n    }\n\n    return () => clearInterval(timer);\n  }, [isActive, time]);\n  useEffect(() => {\n    generateNumbers();\n  }, []);\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  const handleChange = e => {\n    const tempInput = Number(input.concat(e.key));\n\n    if (tempInput.toString().length < answer.toString().length) {\n      setInput(tempInput.toString());\n    } else if (tempInput !== answer) {\n      toast({\n        position: 'top',\n        duration: 500,\n        render: () => __jsx(Box, {\n          m: 3,\n          color: \"red.500\",\n          p: 3,\n          borderRadius: \"5px\"\n        }, \"wrong\")\n      });\n      if (prevAnswers.length >= prevAnsDisplayNumber) prevAnswers.pop();\n      setPrevAnswers([{\n        color: 'red.500',\n        answer: `${number1} + ${number2} ≠ ${tempInput}`\n      }, ...prevAnswers]);\n      setInput('');\n    } else {\n      setIsActive(false);\n      setTime(100);\n      toast({\n        position: 'top',\n        duration: 500,\n        render: () => __jsx(Box, {\n          m: 3,\n          color: \"green.500\",\n          p: 3,\n          borderRadius: \"5px\"\n        }, \"correct\")\n      });\n      const newScore = score + 10;\n      setScore(newScore);\n      setLevel(level + 1);\n      if (prevAnswers.length >= prevAnsDisplayNumber) prevAnswers.pop();\n      setPrevAnswers([{\n        color: 'green.500',\n        answer: `${number1} + ${number2} = ${tempInput}`\n      }, ...prevAnswers]);\n      setInput('');\n      generateNumbers();\n      setIsActive(true);\n    }\n  };\n\n  const getHighscore = mode => {\n    fetch(`/api/gethighscore`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mode\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        setHighscore(data.data.score);\n      }\n    }).catch(err => {\n      console.error(`Something wrong happened while getting messages:${err.message}`);\n    });\n  };\n\n  const handleHomeBtnClick = () => {\n    setIsActive(false);\n    setModalCategory('gohome');\n    onOpen();\n  };\n\n  const handleGoHome = () => {\n    if (score > highscore) {\n      props.setIsNewHighscore(true);\n      props.setNewscore(score);\n      props.setView('highscore');\n    } else {\n      props.setView('home');\n    }\n  };\n\n  const gameOver = () => {\n    setIsActive(false);\n    setModalCategory('gameover');\n    onOpen();\n  };\n\n  let sliderColor = null;\n\n  switch (true) {\n    case time > 80:\n      sliderColor = 'green';\n      break;\n\n    case time > 60:\n      sliderColor = 'blue';\n      break;\n\n    case time > 40:\n      sliderColor = 'yellow';\n      break;\n\n    case time > 20:\n      sliderColor = 'orange';\n      break;\n\n    default:\n      sliderColor = 'red';\n  }\n\n  const restart = () => {\n    setModalCategory('ready');\n  };\n\n  const play = () => {\n    setScore(0);\n    setLevel(1);\n    setTime(100);\n    setIsActive(true);\n    setInput('');\n    onClose();\n  };\n\n  let modalElement = null;\n\n  switch (modalCategory) {\n    case 'gohome':\n      modalElement = __jsx(React.Fragment, null, __jsx(ModalBody, {\n        m: 10,\n        textAlign: \"center\"\n      }, \"Do you want to quit?\"), __jsx(Flex, {\n        align: \"center\",\n        justify: \"space-evenly\",\n        direction: \"row\",\n        backgroundColor: \"gold\"\n      }, __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: () => handleGoHome(),\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Yes\"), __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: () => {\n          setIsActive(true);\n          onClose();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Close\")));\n      break;\n\n    case 'gameover':\n      modalElement = __jsx(React.Fragment, null, __jsx(ModalBody, {\n        m: 10,\n        textAlign: \"center\"\n      }, \"Game Over\"), __jsx(Flex, {\n        align: \"center\",\n        justify: \"space-evenly\",\n        direction: \"row\",\n        backgroundColor: \"gold\"\n      }, __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: () => handleGoHome(),\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Home\"), __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: () => {\n          restart();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Restart\")));\n      break;\n\n    case 'ready':\n      modalElement = __jsx(React.Fragment, null, __jsx(ModalBody, {\n        m: 10,\n        textAlign: \"center\"\n      }, __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        m: 5,\n        color: \"black\",\n        width: \"100px\",\n        backgroundColor: \"gold\",\n        onClick: () => play(),\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Start\")));\n      break;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Flex, {\n    width: ['100%'],\n    align: \"center\",\n    justify: \"space-between\"\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, __jsx(Box, {\n    m: \"2\"\n  }, __jsx(Button, {\n    color: \"gold\",\n    fontSize: \"32px\",\n    variant: \"ghost\",\n    _hover: {\n      color: 'white'\n    },\n    _active: {\n      bg: 'none'\n    },\n    _focus: {\n      outline: 'none'\n    },\n    onClick: () => handleHomeBtnClick()\n  }, __jsx(BiHomeAlt, null)))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, __jsx(Box, {\n    m: \"2\",\n    textAlign: \"center\",\n    fontSize: \"12px\"\n  }, \"Highscore\"), __jsx(Box, {\n    fontSize: \"22px\",\n    textAlign: \"center\"\n  }, highscore))), __jsx(Flex, {\n    width: ['100%'],\n    height: ['100%'],\n    align: \"center\",\n    justify: \"center\"\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\"\n  }, __jsx(Stack, {\n    spacing: 20\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, __jsx(Box, {\n    m: \"2\",\n    textAlign: \"center\",\n    fontSize: \"12px\"\n  }, score > highscore ? __jsx(Badge, {\n    variantColor: \"green\"\n  }, \"new highscore\") : 'Score'), __jsx(Box, {\n    fontSize: \"22px\",\n    textAlign: \"center\"\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\"\n  }, __jsx(CountUp, {\n    start: score > 0 ? score - 10 : 0,\n    end: score,\n    duration: 1\n  })))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"row\"\n  }, __jsx(Slider, {\n    color: sliderColor,\n    defaultValue: 100,\n    value: time,\n    size: \"sm\",\n    width: \"200px\"\n  }, __jsx(SliderTrack, null), __jsx(SliderFilledTrack, null), __jsx(SliderThumb, null))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"row\"\n  }, __jsx(Stack, {\n    isInline: true\n  }, __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\"\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\"\n  }, \" \", number1)), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\"\n  }, symbol), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\"\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\"\n  }, \" \", number2)), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\"\n  }, \"=\"))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"row\"\n  }, __jsx(Input, {\n    autoFocus: true,\n    variant: \"unstyled\",\n    textAlign: \"center\",\n    fontSize: \"32px\" // type=\"number\"\n    ,\n    pattern: \"[0-9]*\",\n    value: input,\n    onChange: e => {}\n  })), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, prevAnswers.length > 0 && __jsx(React.Fragment, null, __jsx(Box, {\n    width: \"200px\",\n    textAlign: \"center\",\n    fontSize: \"16px\",\n    m: 5\n  }, \"previous answers\"), __jsx(Box, {\n    width: \"200px\",\n    textAlign: \"center\",\n    fontSize: \"24px\"\n  }, prevAnswers.map((answer, index) => {\n    return __jsx(Box, {\n      key: index,\n      color: answer.color,\n      fontSize: `${24 - index * 2}px`\n    }, answer.answer);\n  })))))), __jsx(Modal, {\n    isCentered: true,\n    isOpen: isOpen,\n    onClose: onClose,\n    closeOnEsc: false,\n    closeOnOverlayClick: false\n  }, __jsx(ModalContent, {\n    border: \"5px solid gold\",\n    backgroundColor: \"black\",\n    borderRadius: \"10px\",\n    height: \"175px\",\n    opacity: 1\n  }, modalElement))));\n}","map":null,"metadata":{},"sourceType":"module"}