{"ast":null,"code":"import Scoreboard from '../../middleware/models/scoreboard';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    mode\n  } = request.body;\n\n  try {\n    const scoreboard = await Scoreboard.find({\n      mode\n    }).sort({\n      score: -1\n    }).limit(10);\n\n    if (!scoreboard) {\n      return response.status(404).json({\n        success: false,\n        message: 'no scoreboard data'\n      });\n    }\n\n    return response.status(200).json({\n      success: true,\n      data: scoreboard\n    });\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to get scoreboard data'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-math/pages/api/gethighscores.tsx"],"names":["Scoreboard","require","request","response","mode","body","scoreboard","find","sort","score","limit","status","json","success","message","data","e"],"mappings":"AACA,OAAOA,UAAP,MAAuB,oCAAvB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAWF,OAAO,CAACG,IAAzB;;AACA,MAAI;AACF,UAAMC,UAAU,GAAG,MAAMN,UAAU,CAACO,IAAX,CAAgB;AAAEH,MAAAA;AAAF,KAAhB,EACtBI,IADsB,CACjB;AAAEC,MAAAA,KAAK,EAAE,CAAC;AAAV,KADiB,EAEtBC,KAFsB,CAEhB,EAFgB,CAAzB;;AAGA,QAAI,CAACJ,UAAL,EAAiB;AACf,aAAOH,QAAQ,CACZQ,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAFD,CAAP;AAGD;;AACD,WAAOX,QAAQ,CAACQ,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBE,MAAAA,IAAI,EAAET;AAAvB,KAA1B,CAAP;AACD,GAVD,CAUE,OAAOU,CAAP,EAAU;AACV,WAAOb,QAAQ,CACZQ,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CAjBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Scoreboard from '../../middleware/models/scoreboard';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { mode } = request.body;\n  try {\n    const scoreboard = await Scoreboard.find({ mode })\n      .sort({ score: -1 })\n      .limit(10);\n    if (!scoreboard) {\n      return response\n        .status(404)\n        .json({ success: false, message: 'no scoreboard data' });\n    }\n    return response.status(200).json({ success: true, data: scoreboard });\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to get scoreboard data' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}