{"ast":null,"code":"import Scoreboard from '../../middleware/models/scoreboard';\n\nrequire('../../middleware/db/mongoose');\n\nexport default (async (request, response) => {\n  const {\n    score,\n    mode,\n    username\n  } = request.body;\n\n  try {\n    const newScore = new Scoreboard({\n      score,\n      mode,\n      username\n    });\n    newScore.save();\n\n    try {\n      const scoreboard = await Scoreboard.find({\n        mode\n      }).sort({\n        score: -1\n      }).limit(10);\n\n      if (!scoreboard) {\n        return response.status(404).json({\n          success: false,\n          message: 'no scoreboard data after adding a highscore'\n        });\n      }\n\n      return response.status(200).json({\n        success: true,\n        data: scoreboard\n      });\n    } catch (e) {\n      return response.status(500).json({\n        success: false,\n        message: 'failed to get scoreboard data after adding a highscore'\n      });\n    }\n  } catch (e) {\n    return response.status(500).json({\n      success: false,\n      message: 'failed to add new highscore'\n    });\n  }\n});","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-math/pages/api/addhighscore.tsx"],"names":["Scoreboard","require","request","response","score","mode","username","body","newScore","save","scoreboard","find","sort","limit","status","json","success","message","data","e"],"mappings":"AACA,OAAOA,UAAP,MAAuB,oCAAvB;;AACAC,OAAO,CAAC,8BAAD,CAAP;;AAEA,gBAAe,OAAOC,OAAP,EAAgCC,QAAhC,KAA8D;AAC3E,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAA4BJ,OAAO,CAACK,IAA1C;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,IAAIR,UAAJ,CAAe;AAAEI,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,KAAf,CAAjB;AACAE,IAAAA,QAAQ,CAACC,IAAT;;AACA,QAAI;AACF,YAAMC,UAAU,GAAG,MAAMV,UAAU,CAACW,IAAX,CAAgB;AAAEN,QAAAA;AAAF,OAAhB,EACtBO,IADsB,CACjB;AAAER,QAAAA,KAAK,EAAE,CAAC;AAAV,OADiB,EAEtBS,KAFsB,CAEhB,EAFgB,CAAzB;;AAGA,UAAI,CAACH,UAAL,EAAiB;AACf,eAAOP,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,UAAAA,OAAO,EAAE,KADsB;AAE/BC,UAAAA,OAAO,EAAE;AAFsB,SAA1B,CAAP;AAID;;AACD,aAAOd,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBE,QAAAA,IAAI,EAAER;AAAvB,OAA1B,CAAP;AACD,KAXD,CAWE,OAAOS,CAAP,EAAU;AACV,aAAOhB,QAAQ,CAACW,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAC/BC,QAAAA,OAAO,EAAE,KADsB;AAE/BC,QAAAA,OAAO,EAAE;AAFsB,OAA1B,CAAP;AAID;AACF,GApBD,CAoBE,OAAOE,CAAP,EAAU;AACV,WAAOhB,QAAQ,CACZW,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAFD,CAAP;AAGD;AACF,CA3BD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport Scoreboard from '../../middleware/models/scoreboard';\nrequire('../../middleware/db/mongoose');\n\nexport default async (request: NextApiRequest, response: NextApiResponse) => {\n  const { score, mode, username } = request.body;\n  try {\n    const newScore = new Scoreboard({ score, mode, username });\n    newScore.save();\n    try {\n      const scoreboard = await Scoreboard.find({ mode })\n        .sort({ score: -1 })\n        .limit(10);\n      if (!scoreboard) {\n        return response.status(404).json({\n          success: false,\n          message: 'no scoreboard data after adding a highscore',\n        });\n      }\n      return response.status(200).json({ success: true, data: scoreboard });\n    } catch (e) {\n      return response.status(500).json({\n        success: false,\n        message: 'failed to get scoreboard data after adding a highscore',\n      });\n    }\n  } catch (e) {\n    return response\n      .status(500)\n      .json({ success: false, message: 'failed to add new highscore' });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}