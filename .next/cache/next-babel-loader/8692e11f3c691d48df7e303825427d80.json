{"ast":null,"code":"var _jsxFileName = \"/Users/heegupark/Desktop/Workspace/MyProject/omega-math/components/play.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Flex, Button, Box, Stack, Input } from '@chakra-ui/core';\nimport { BiHomeAlt } from 'react-icons/bi';\nimport { useToast } from '@chakra-ui/core';\nimport CountUp from 'react-countup';\nexport default function Play(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(1),\n      number1 = _useState[0],\n      setNumber1 = _useState[1];\n\n  var _useState2 = useState(2),\n      number2 = _useState2[0],\n      setNumber2 = _useState2[1];\n\n  var _useState3 = useState(1),\n      level = _useState3[0],\n      setLevel = _useState3[1];\n\n  var _useState4 = useState(''),\n      input = _useState4[0],\n      setInput = _useState4[1];\n\n  var _useState5 = useState(0),\n      answer = _useState5[0],\n      setAnswer = _useState5[1];\n\n  var _useState6 = useState(0),\n      score = _useState6[0],\n      setScore = _useState6[1];\n\n  var _useState7 = useState(0),\n      highscore = _useState7[0],\n      setHighscore = _useState7[1];\n\n  var _useState8 = useState(false),\n      isResetting = _useState8[0],\n      setIsResetting = _useState8[1];\n\n  var toast = useToast();\n\n  var generateNumbers = function generateNumbers() {\n    setIsResetting(false);\n    var num1 = Math.floor(Math.random() * level * 2 + 1);\n    var num2 = Math.floor(Math.random() * (level + 1) * 2 + 1);\n    setNumber1(num1);\n    setNumber2(num2);\n    setAnswer(num1 + num2);\n    setIsResetting(true);\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (Number(e.key) >= 0 && Number(e.key) <= 9) {\n      handleChange(e);\n    }\n  };\n\n  useEffect(function () {\n    generateNumbers();\n  }, []);\n  useEffect(function () {\n    window.addEventListener('keydown', handleKeyDown);\n    return function () {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  var handleChange = function handleChange(e) {\n    var tempInput = Number(input.concat(e.key));\n\n    if (tempInput.toString().length < answer.toString().length) {\n      setInput(tempInput.toString());\n    } else if (tempInput !== answer) {\n      toast({\n        position: 'top',\n        duration: 500,\n        render: function render() {\n          return __jsx(Box, {\n            m: 3,\n            color: \"red.500\",\n            p: 3 // border=\"1px solid red\"\n            ,\n            borderRadius: \"5px\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 11\n            }\n          }, \"wrong\");\n        }\n      });\n      setInput('');\n    } else {\n      toast({\n        position: 'top',\n        duration: 500,\n        render: function render() {\n          return __jsx(Box, {\n            m: 3,\n            color: \"green.500\",\n            p: 3 // border=\"1px solid gold\"\n            ,\n            borderRadius: \"5px\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 11\n            }\n          }, \"correct\");\n        }\n      });\n      var newScore = score + 10;\n      setScore(newScore);\n      if (newScore > highscore) setHighscore(newScore);\n      setLevel(level + 1);\n      setInput('');\n      generateNumbers();\n    }\n  };\n\n  var handleHomeBtnClick = function handleHomeBtnClick() {\n    props.setView('home');\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Flex, {\n    width: ['100%'],\n    align: \"center\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    m: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    color: \"gold\",\n    fontSize: \"32px\",\n    variant: \"ghost\",\n    _hover: {\n      color: 'white'\n    },\n    _active: {\n      bg: 'none'\n    },\n    _focus: {\n      outline: 'none'\n    },\n    onClick: function onClick() {\n      return handleHomeBtnClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, __jsx(BiHomeAlt, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  })))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    m: \"2\",\n    textAlign: \"center\",\n    fontSize: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, \"Highscore\"), __jsx(Box, {\n    fontSize: \"22px\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, highscore))), __jsx(Flex, {\n    width: ['100%'],\n    height: ['100%'],\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    spacing: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    m: \"2\",\n    textAlign: \"center\",\n    fontSize: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, \"Score\"), __jsx(Box, {\n    fontSize: \"22px\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  }, __jsx(CountUp, {\n    start: score > 0 ? score - 10 : 0,\n    end: score,\n    duration: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  })))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, __jsx(Stack, {\n    isInline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 35\n    }\n  }, \" \", number1)), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, \"+\"), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 35\n    }\n  }, \" \", number2)), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, \"=\"))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    autoFocus: true,\n    variant: \"unstyled\",\n    textAlign: \"center\",\n    fontSize: \"32px\",\n    type: \"number\",\n    value: input,\n    onChange: function onChange(e) {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }))))));\n}\n\n_s(Play, \"MmwBh0TGgrmlZ+OTdgwJCySCzOg=\", false, function () {\n  return [useToast];\n});\n\n_c = Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/Users/heegupark/Desktop/Workspace/MyProject/omega-math/components/play.tsx"],"names":["React","useState","useEffect","Flex","Button","Box","Stack","Input","BiHomeAlt","useToast","CountUp","Play","props","number1","setNumber1","number2","setNumber2","level","setLevel","input","setInput","answer","setAnswer","score","setScore","highscore","setHighscore","isResetting","setIsResetting","toast","generateNumbers","num1","Math","floor","random","num2","handleKeyDown","e","Number","key","handleChange","window","addEventListener","removeEventListener","tempInput","concat","toString","length","position","duration","render","newScore","handleHomeBtnClick","setView","color","bg","outline"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Flex, Button, Box, Text, Stack, Input } from '@chakra-ui/core';\nimport { BiHomeAlt } from 'react-icons/bi';\nimport { useToast } from '@chakra-ui/core';\nimport CountUp from 'react-countup';\n\nexport default function Play(props: any) {\n  const [number1, setNumber1] = useState(1);\n  const [number2, setNumber2] = useState(2);\n  const [level, setLevel] = useState(1);\n  const [input, setInput] = useState('');\n  const [answer, setAnswer] = useState(0);\n  const [score, setScore] = useState(0);\n  const [highscore, setHighscore] = useState(0);\n  const [isResetting, setIsResetting] = useState(false);\n  const toast = useToast();\n\n  const generateNumbers = () => {\n    setIsResetting(false);\n    const num1 = Math.floor(Math.random() * level * 2 + 1);\n    const num2 = Math.floor(Math.random() * (level + 1) * 2 + 1);\n    setNumber1(num1);\n    setNumber2(num2);\n    setAnswer(num1 + num2);\n    setIsResetting(true);\n  };\n\n  const handleKeyDown = (e: any) => {\n    if (Number(e.key) >= 0 && Number(e.key) <= 9) {\n      handleChange(e);\n    }\n  };\n\n  useEffect(() => {\n    generateNumbers();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  const handleChange = (e: any) => {\n    const tempInput = Number(input.concat(e.key));\n    if (tempInput.toString().length < answer.toString().length) {\n      setInput(tempInput.toString());\n    } else if (tempInput !== answer) {\n      toast({\n        position: 'top',\n        duration: 500,\n        render: () => (\n          <Box\n            m={3}\n            color=\"red.500\"\n            p={3}\n            // border=\"1px solid red\"\n            borderRadius=\"5px\"\n          >\n            wrong\n          </Box>\n        ),\n      });\n      setInput('');\n    } else {\n      toast({\n        position: 'top',\n        duration: 500,\n        render: () => (\n          <Box\n            m={3}\n            color=\"green.500\"\n            p={3}\n            // border=\"1px solid gold\"\n            borderRadius=\"5px\"\n          >\n            correct\n          </Box>\n        ),\n      });\n      const newScore = score + 10;\n      setScore(newScore);\n      if (newScore > highscore) setHighscore(newScore);\n      setLevel(level + 1);\n      setInput('');\n      generateNumbers();\n    }\n  };\n\n  const handleHomeBtnClick = () => {\n    props.setView('home');\n  };\n\n  return (\n    <>\n      <Flex width={['100%']} align=\"center\" justify=\"space-between\">\n        <Flex align=\"center\" justify=\"center\" direction=\"column\">\n          <Box m=\"2\">\n            <Button\n              color=\"gold\"\n              fontSize=\"32px\"\n              variant=\"ghost\"\n              _hover={{ color: 'white' }}\n              _active={{ bg: 'none' }}\n              _focus={{ outline: 'none' }}\n              onClick={() => handleHomeBtnClick()}\n            >\n              <BiHomeAlt />\n            </Button>\n          </Box>\n        </Flex>\n        {/* <Flex align=\"center\" justify=\"center\" direction=\"column\">\n          <Box m=\"2\" textAlign=\"center\" fontSize=\"12px\">\n            Score\n          </Box>\n          <Box fontSize=\"22px\" textAlign=\"center\">\n            {score}\n          </Box>\n        </Flex> */}\n        <Flex align=\"center\" justify=\"center\" direction=\"column\">\n          <Box m=\"2\" textAlign=\"center\" fontSize=\"12px\">\n            Highscore\n          </Box>\n          <Box fontSize=\"22px\" textAlign=\"center\">\n            {highscore}\n          </Box>\n        </Flex>\n      </Flex>\n      <Flex width={['100%']} height={['100%']} align=\"center\" justify=\"center\">\n        <Flex align=\"center\" justify=\"center\">\n          <Stack spacing={20}>\n            {/* <Flex m={10} align=\"center\" justify=\"center\" direction=\"column\">\n              <Box fontSize=\"12px\" color=\"yellow\" textAlign=\"center\">\n                level\n              </Box>\n              <Box fontSize=\"22px\" color=\"yellow\" textAlign=\"center\">\n                {level}\n              </Box>\n            </Flex> */}\n            <Flex align=\"center\" justify=\"center\" direction=\"column\">\n              <Box m=\"2\" textAlign=\"center\" fontSize=\"12px\">\n                Score\n              </Box>\n              <Box fontSize=\"22px\" textAlign=\"center\">\n                {isResetting && (\n                  <Box className=\"bounce\">\n                    <CountUp\n                      start={score > 0 ? score - 10 : 0}\n                      end={score}\n                      duration={1}\n                    />\n                  </Box>\n                )}\n              </Box>\n            </Flex>\n            <Flex align=\"center\" justify=\"center\" direction=\"row\">\n              <Stack isInline>\n                <Box width=\"100px\" textAlign=\"center\" fontSize=\"40px\">\n                  {isResetting && <Box className=\"bounce\"> {number1}</Box>}\n                </Box>\n                <Box width=\"100px\" textAlign=\"center\" fontSize=\"40px\">\n                  +\n                </Box>\n                <Box width=\"100px\" textAlign=\"center\" fontSize=\"40px\">\n                  {isResetting && <Box className=\"bounce\"> {number2}</Box>}\n                </Box>\n                <Box width=\"100px\" textAlign=\"center\" fontSize=\"40px\">\n                  =\n                </Box>\n              </Stack>\n            </Flex>\n            <Flex align=\"center\" justify=\"center\" direction=\"row\">\n              <Input\n                autoFocus\n                variant=\"unstyled\"\n                textAlign=\"center\"\n                fontSize=\"32px\"\n                type=\"number\"\n                value={input}\n                onChange={(e: any) => {}}\n              />\n            </Flex>\n          </Stack>\n        </Flex>\n      </Flex>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}