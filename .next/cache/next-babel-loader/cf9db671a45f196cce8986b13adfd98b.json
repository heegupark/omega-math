{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { BiHomeAlt } from 'react-icons/bi';\nimport CountUp from 'react-countup';\nimport { Flex, Button, Box, Stack, Input, useToast, Modal, ModalContent, ModalBody, useDisclosure, Badge, Slider, SliderTrack, SliderFilledTrack, SliderThumb } from '@chakra-ui/core';\nexport default function Play(props) {\n  var _useState = useState(1),\n      number1 = _useState[0],\n      setNumber1 = _useState[1];\n\n  var _useState2 = useState(2),\n      number2 = _useState2[0],\n      setNumber2 = _useState2[1];\n\n  var _useState3 = useState(1),\n      level = _useState3[0],\n      setLevel = _useState3[1];\n\n  var _useState4 = useState(''),\n      input = _useState4[0],\n      setInput = _useState4[1];\n\n  var _useState5 = useState(0),\n      answer = _useState5[0],\n      setAnswer = _useState5[1];\n\n  var _useState6 = useState([]),\n      prevAnswers = _useState6[0],\n      setPrevAnswers = _useState6[1];\n\n  var _useState7 = useState(0),\n      score = _useState7[0],\n      setScore = _useState7[1];\n\n  var _useState8 = useState(0),\n      highscore = _useState8[0],\n      setHighscore = _useState8[1];\n\n  var _useState9 = useState(false),\n      isResetting = _useState9[0],\n      setIsResetting = _useState9[1];\n\n  var _useState10 = useState('+'),\n      symbol = _useState10[0],\n      setSymbol = _useState10[1];\n\n  var _useState11 = useState(100),\n      time = _useState11[0],\n      setTime = _useState11[1];\n\n  var _useState12 = useState(false),\n      isActive = _useState12[0],\n      setIsActive = _useState12[1];\n\n  var _useState13 = useState('ready'),\n      modalCategory = _useState13[0],\n      setModalCategory = _useState13[1];\n\n  var toast = useToast();\n\n  var _useDisclosure = useDisclosure(true),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose;\n\n  var prevAnsDisplayNumber = 5;\n\n  var generateNumbers = function generateNumbers() {\n    setIsResetting(false);\n    var num1 = Math.floor(Math.random() * level * 2 + 1);\n    var num2 = Math.floor(Math.random() * (level + 1) * 2 + 1);\n    setNumber1(num1);\n    setNumber2(num2);\n\n    switch (props.mode) {\n      case 'add':\n        setNumber1(num1);\n        setNumber2(num2);\n        setAnswer(num1 + num2);\n        break;\n\n      case 'subtract':\n        if (num2 > num1) {\n          setNumber1(num2);\n          setNumber2(num1);\n          setAnswer(num2 - num1);\n        } else {\n          setNumber1(num1);\n          setNumber2(num2);\n          setAnswer(num1 - num2);\n        }\n\n        break;\n\n      case 'multiply':\n        setAnswer(num1 * num2);\n        break;\n\n      case 'divide':\n        setNumber1(num1 * num2);\n        setNumber2(num2);\n        setAnswer(num1);\n        break;\n\n      default:\n        setNumber1(num1);\n        setNumber2(num2);\n        setAnswer(num1 + num2);\n        break;\n    }\n\n    setIsResetting(true);\n  };\n\n  useEffect(function () {\n    switch (props.mode) {\n      case 'add':\n        setSymbol('+');\n        break;\n\n      case 'subtract':\n        setSymbol('-');\n        break;\n\n      case 'multiply':\n        setSymbol('ร');\n        break;\n\n      case 'divide':\n        setSymbol('รท');\n        break;\n\n      default:\n        setSymbol('+');\n        break;\n    }\n  }, []);\n  useEffect(function () {\n    getHighscore(props.mode);\n  }, []);\n  useEffect(function () {\n    var timer = 0;\n\n    if (isActive) {\n      timer = window.setInterval(function () {\n        if (time > 0) setTime(time - 0.1);\n\n        if (time <= 0) {\n          setTime(0);\n          gameOver();\n          clearInterval(timer);\n        }\n      }, 10);\n    } else if (!isActive && time !== 0) {\n      clearInterval(timer);\n    }\n\n    return function () {\n      return clearInterval(timer);\n    };\n  }, [isActive, time]);\n  useEffect(function () {\n    generateNumbers();\n  }, []);\n\n  var handleChange = function handleChange(e) {\n    var tempInput = Number(e.target.value);\n\n    if (tempInput.toString().length < answer.toString().length) {\n      setInput(tempInput.toString());\n    } else if (tempInput !== answer) {\n      toast({\n        position: 'top',\n        duration: 500,\n        render: function render() {\n          return __jsx(Box, {\n            m: 3,\n            color: \"red.500\",\n            p: 3,\n            borderRadius: \"5px\"\n          }, \"wrong\");\n        }\n      });\n      if (prevAnswers.length >= prevAnsDisplayNumber) prevAnswers.pop();\n      setPrevAnswers([{\n        color: 'red.500',\n        answer: \"\".concat(number1, \" + \").concat(number2, \" \\u2260 \").concat(tempInput)\n      }].concat(_toConsumableArray(prevAnswers)));\n      setTime(time - 3);\n      setInput('');\n    } else {\n      setIsActive(false);\n      toast({\n        position: 'top',\n        duration: 500,\n        render: function render() {\n          return __jsx(Box, {\n            m: 3,\n            color: \"green.500\",\n            p: 3,\n            borderRadius: \"5px\"\n          }, \"correct\");\n        }\n      });\n      var newScore = score + 10;\n      setScore(newScore);\n      var nextLevelTime = 100 - (level - 1) * 3;\n      setTime(nextLevelTime > 30 ? nextLevelTime : 30);\n      setLevel(level + 1);\n      if (prevAnswers.length >= prevAnsDisplayNumber) prevAnswers.pop();\n      setPrevAnswers([{\n        color: 'green.500',\n        answer: \"\".concat(number1, \" + \").concat(number2, \" = \").concat(tempInput)\n      }].concat(_toConsumableArray(prevAnswers)));\n      setInput('');\n      generateNumbers();\n      setIsActive(true);\n    }\n  };\n\n  var getHighscore = function getHighscore(mode) {\n    fetch(\"/api/gethighscore\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mode: mode\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        setHighscore(data.data.score);\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting messages:\".concat(err.message));\n    });\n  };\n\n  var handleHomeBtnClick = function handleHomeBtnClick() {\n    setIsActive(false);\n    setModalCategory('gohome');\n    onOpen();\n  };\n\n  var handleGoHome = function handleGoHome() {\n    props.setView('home');\n  };\n\n  var gameOver = function gameOver() {\n    setIsActive(false);\n    setModalCategory('gameover');\n    onOpen();\n  };\n\n  var sliderColor = null;\n\n  switch (true) {\n    case time > 80:\n      sliderColor = 'green';\n      break;\n\n    case time > 60:\n      sliderColor = 'blue';\n      break;\n\n    case time > 40:\n      sliderColor = 'yellow';\n      break;\n\n    case time > 20:\n      sliderColor = 'orange';\n      break;\n\n    default:\n      sliderColor = 'red';\n  }\n\n  var restart = function restart() {\n    setModalCategory('ready');\n  };\n\n  var record = function record() {\n    props.setIsNewHighscore(true);\n    props.setNewscore(score);\n    props.setView('highscore');\n  };\n\n  var play = function play() {\n    setScore(0);\n    setLevel(1);\n    setTime(100);\n    setIsActive(true);\n    setInput('');\n    setPrevAnswers([]);\n    generateNumbers();\n    onClose();\n  };\n\n  var modalElement = null;\n\n  switch (modalCategory) {\n    case 'gohome':\n      modalElement = __jsx(React.Fragment, null, __jsx(ModalBody, {\n        m: 10,\n        textAlign: \"center\"\n      }, \"Do you want to quit?\"), __jsx(Flex, {\n        align: \"center\",\n        justify: \"space-evenly\",\n        direction: \"row\",\n        backgroundColor: \"gold\"\n      }, __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: function onClick() {\n          return handleGoHome();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Yes\"), __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: function onClick() {\n          setIsActive(true);\n          onClose();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Close\")));\n      break;\n\n    case 'gameover':\n      modalElement = __jsx(React.Fragment, null, __jsx(ModalBody, {\n        m: 10,\n        textAlign: \"center\"\n      }, score > highscore ? __jsx(\"p\", null, \"Congratulations! New highscore!\") : __jsx(\"p\", null, \"Time Over\")), __jsx(Flex, {\n        align: \"center\",\n        justify: \"space-evenly\",\n        direction: \"row\",\n        backgroundColor: \"gold\"\n      }, score > highscore ? __jsx(React.Fragment, null, __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: function onClick() {\n          return handleGoHome();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Home\"), __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: function onClick() {\n          record();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Record\")) : __jsx(React.Fragment, null, __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: function onClick() {\n          return handleGoHome();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Home\"), __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        color: \"black\",\n        onClick: function onClick() {\n          restart();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Restart\"))));\n      break;\n\n    case 'ready':\n      modalElement = __jsx(React.Fragment, null, __jsx(ModalBody, {\n        m: 10,\n        textAlign: \"center\"\n      }, __jsx(Button, {\n        variant: \"ghost\",\n        size: \"sm\",\n        m: 5,\n        color: \"black\",\n        width: \"100px\",\n        backgroundColor: \"gold\",\n        onClick: function onClick() {\n          return play();\n        },\n        _focus: {\n          outline: 'none'\n        },\n        _hover: {\n          color: 'grey'\n        }\n      }, \"Start\")));\n      break;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Flex, {\n    width: ['100%'],\n    align: \"center\",\n    justify: \"space-between\"\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, __jsx(Box, {\n    m: \"2\"\n  }, __jsx(Button, {\n    color: \"gold\",\n    fontSize: \"32px\",\n    variant: \"ghost\",\n    _hover: {\n      color: 'white'\n    },\n    _active: {\n      bg: 'none'\n    },\n    _focus: {\n      outline: 'none'\n    },\n    onClick: function onClick() {\n      return handleHomeBtnClick();\n    }\n  }, __jsx(BiHomeAlt, null)))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, __jsx(Box, {\n    m: \"2\",\n    textAlign: \"center\",\n    fontSize: \"12px\"\n  }, \"Highscore\"), __jsx(Box, {\n    fontSize: \"22px\",\n    textAlign: \"center\"\n  }, highscore))), __jsx(Flex, {\n    width: ['100%'],\n    height: ['100%'],\n    align: \"center\",\n    justify: \"center\"\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\"\n  }, __jsx(Stack, {\n    spacing: 20\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, __jsx(Box, {\n    m: \"2\",\n    textAlign: \"center\",\n    fontSize: \"12px\"\n  }, score > highscore ? __jsx(Badge, {\n    variantColor: \"green\"\n  }, \"new highscore\") : 'Score'), __jsx(Box, {\n    fontSize: \"22px\",\n    textAlign: \"center\"\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\"\n  }, __jsx(CountUp, {\n    start: score > 0 ? score - 10 : 0,\n    end: score,\n    duration: 1\n  })))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"row\"\n  }, __jsx(Slider, {\n    color: sliderColor,\n    defaultValue: time,\n    value: time,\n    size: \"sm\",\n    width: \"200px\"\n  }, __jsx(SliderTrack, null), __jsx(SliderFilledTrack, null), __jsx(SliderThumb, null))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"row\"\n  }, __jsx(Stack, {\n    isInline: true\n  }, __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\"\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\"\n  }, \" \", number1)), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\"\n  }, symbol), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\"\n  }, isResetting && __jsx(Box, {\n    className: \"bounce\"\n  }, \" \", number2)), __jsx(Box, {\n    width: \"100px\",\n    textAlign: \"center\",\n    fontSize: \"40px\"\n  }, \"=\"))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, __jsx(Box, {\n    fontSize: \"10px\"\n  }, \"Yout answer here\"), __jsx(Input, {\n    autoFocus: true,\n    variant: \"unstyled\",\n    textAlign: \"center\",\n    fontSize: \"32px\",\n    pattern: \"[0-9]*\",\n    value: input,\n    borderBottom: \"1px double white\",\n    borderRadius: \"0px\",\n    width: \"100px\",\n    onChange: function onChange(e) {\n      return handleChange(e);\n    }\n  })), __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\"\n  }, prevAnswers.length > 0 && __jsx(React.Fragment, null, __jsx(Box, {\n    width: \"200px\",\n    textAlign: \"center\",\n    fontSize: \"16px\",\n    m: 5\n  }, \"previous answers\"), __jsx(Box, {\n    width: \"200px\",\n    textAlign: \"center\",\n    fontSize: \"24px\"\n  }, prevAnswers.map(function (answer, index) {\n    return __jsx(Box, {\n      key: index,\n      color: answer.color,\n      fontSize: \"\".concat(24 - index * 2, \"px\")\n    }, answer.answer);\n  })))))), __jsx(Modal, {\n    isCentered: true,\n    isOpen: isOpen,\n    onClose: onClose,\n    closeOnEsc: false,\n    closeOnOverlayClick: false\n  }, __jsx(ModalContent, {\n    border: \"5px solid gold\",\n    backgroundColor: \"black\",\n    borderRadius: \"10px\",\n    height: \"175px\",\n    opacity: 1\n  }, modalElement))));\n}","map":null,"metadata":{},"sourceType":"module"}