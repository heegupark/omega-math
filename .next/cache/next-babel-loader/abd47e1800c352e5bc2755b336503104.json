{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Flex, Button, Stack, Box, Input, Collapse } from '@chakra-ui/core';\nexport default function Highscore(props) {\n  var _useState = useState(''),\n      username = _useState[0],\n      setUsername = _useState[1];\n\n  var _useState2 = useState(new Array(10)),\n      highscores = _useState2[0],\n      setHighscores = _useState2[1];\n\n  var _useState3 = useState(true),\n      show = _useState3[0],\n      setShow = _useState3[1];\n\n  var _useState4 = useState(''),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var handleSave = function handleSave() {\n    addHighscore(props.newScore, username, props.mode);\n  };\n\n  useEffect(function () {\n    getHighscores(props.mode);\n  }, []);\n\n  var getHighscores = function getHighscores(mode) {\n    fetch(\"/api/gethighscores\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mode: mode\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        if (data.data.length > 0) {\n          setMessage('');\n          setHighscores(data.data);\n        } else {\n          setMessage('no data found');\n        }\n\n        setShow(true);\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting messages:\".concat(err.message));\n    });\n  };\n\n  var addHighscore = function addHighscore(score, username, mode) {\n    fetch(\"/api/addhighscore\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        score: score,\n        username: username,\n        mode: mode\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      if (data.success) {\n        setHighscores(data.data);\n        props.setIsNewHighscore(false);\n      }\n    })[\"catch\"](function (err) {\n      console.error(\"Something wrong happened while getting messages:\".concat(err.message));\n    });\n  };\n\n  var convertDate = function convertDate(date) {\n    return \"\".concat(new Date(date).getMonth() + 1, \"/\").concat(new Date(date).getDate(), \"/\").concat(new Date(date).getFullYear());\n  };\n\n  var handleView = function handleView(mode) {\n    setShow(false);\n    setHighscores([]);\n    getHighscores(mode); // setShow(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Flex, {\n    width: ['100%'],\n    height: ['100vh'],\n    align: \"center\",\n    justify: \"center\"\n  }, __jsx(Flex // p={10}\n  , {\n    align: \"center\",\n    justify: \"center\",\n    border: \"5px solid gold\",\n    borderRadius: \"10px\"\n  }, __jsx(Stack, {\n    spacing: 2,\n    height: \"600px\",\n    maxWidth: \"360px\"\n  }, __jsx(Box, {\n    height: \"35px\",\n    textAlign: \"center\",\n    backgroundColor: \"gold\",\n    color: \"black\"\n  }, \"Highscore\"), __jsx(Flex, {\n    align: \"center\",\n    justify: \"space-between\",\n    direction: \"row\",\n    pb: 3,\n    borderBottom: \"3px solid gold\"\n  }, __jsx(Button, {\n    width: \"75px\",\n    textAlign: \"center\",\n    variant: \"ghost\",\n    size: \"sm\",\n    m: 1,\n    onClick: function onClick() {\n      return handleView('add');\n    },\n    _hover: {\n      border: 'none',\n      color: 'grey'\n    },\n    _focus: {\n      outline: 'none',\n      backgroundColor: 'gold',\n      color: 'black'\n    },\n    _active: {\n      outline: 'none',\n      color: 'gold'\n    }\n  }, \"add\"), __jsx(Button, {\n    width: \"75px\",\n    textAlign: \"center\",\n    variant: \"ghost\",\n    size: \"sm\",\n    m: 1,\n    onClick: function onClick() {\n      return handleView('subtract');\n    },\n    _hover: {\n      border: 'none',\n      color: 'grey'\n    },\n    _focus: {\n      outline: 'none',\n      backgroundColor: 'gold',\n      color: 'black'\n    },\n    _active: {\n      outline: 'none',\n      color: 'gold'\n    }\n  }, \"subtract\"), __jsx(Button, {\n    width: \"75px\",\n    textAlign: \"center\",\n    variant: \"ghost\",\n    size: \"sm\",\n    m: 1,\n    onClick: function onClick() {\n      return handleView('multiply');\n    },\n    _hover: {\n      border: 'none',\n      color: 'grey'\n    },\n    _focus: {\n      outline: 'none',\n      backgroundColor: 'gold',\n      color: 'black'\n    },\n    _active: {\n      outline: 'none',\n      color: 'gold'\n    }\n  }, \"multiply\"), __jsx(Button, {\n    width: \"75px\",\n    textAlign: \"center\",\n    variant: \"ghost\",\n    size: \"sm\",\n    m: 1,\n    onClick: function onClick() {\n      return handleView('divide');\n    },\n    _hover: {\n      border: 'none',\n      color: 'grey'\n    },\n    _focus: {\n      outline: 'none',\n      backgroundColor: 'gold',\n      color: 'black'\n    },\n    _active: {\n      outline: 'none',\n      color: 'gold'\n    }\n  }, \"divide\")), __jsx(Box, {\n    height: \"485px\"\n  }, __jsx(Flex, {\n    align: \"center\",\n    justify: \"space-evenly\",\n    direction: \"row\",\n    p: 2\n  }, __jsx(Box, {\n    width: \"75px\",\n    textAlign: \"center\"\n  }, \"score\"), __jsx(Box, {\n    width: \"120px\",\n    textAlign: \"center\",\n    mx: 5\n  }, \"username\"), __jsx(Box, {\n    width: \"150px\",\n    textAlign: \"center\"\n  }, \"date\")), __jsx(Collapse, {\n    mt: 4,\n    isOpen: show\n  }, props.isNewHighscore && __jsx(Flex, {\n    align: \"center\",\n    justify: \"space-evenly\",\n    direction: \"row\",\n    p: 2\n  }, __jsx(Box, {\n    width: \"75px\",\n    textAlign: \"center\"\n  }, props.newScore), __jsx(Input, {\n    autoFocus: true,\n    width: \"120px\",\n    variant: \"unstyled\",\n    textAlign: \"center\",\n    mx: 5,\n    maxLength: 8,\n    borderBottom: \"1px solid white\",\n    value: username,\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === 'Enter' && e.target.value.trim().length > 0) {\n        handleSave();\n      }\n    },\n    onChange: function onChange(e) {\n      return setUsername(e.target.value.trim());\n    }\n  }), __jsx(Box, {\n    width: \"150px\",\n    textAlign: \"center\"\n  }, convertDate(new Date()))), highscores.length > 0 ? highscores.map(function (highscore, index) {\n    if (props.isNewHighscore && index > 9) return;\n    return __jsx(Flex, {\n      key: highscore._id,\n      align: \"center\",\n      justify: \"space-evenly\",\n      direction: \"row\",\n      p: 2\n    }, __jsx(Box, {\n      width: \"75px\",\n      textAlign: \"center\"\n    }, highscore.score), __jsx(Box, {\n      mx: 5,\n      width: \"120px\",\n      textAlign: \"center\"\n    }, highscore.username), __jsx(Box, {\n      width: \"150px\",\n      textAlign: \"center\"\n    }, convertDate(highscore.createdAt)));\n  }) : !props.isNewHighscore && __jsx(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    direction: \"column\",\n    p: 2\n  }, __jsx(Box, {\n    textAlign: \"center\"\n  }, message)))), __jsx(Flex, {\n    align: \"center\",\n    justify: \"space-evenly\",\n    direction: \"row\",\n    backgroundColor: \"gold\"\n  }, props.isNewHighscore && __jsx(Button, {\n    onClick: function onClick() {\n      return handleSave();\n    },\n    variant: \"ghost\",\n    color: \"black\",\n    _hover: {\n      border: 'none',\n      color: 'grey'\n    },\n    _focus: {\n      outline: 'none'\n    }\n  }, \"Save\"), __jsx(Button, {\n    onClick: function onClick() {\n      props.setIsNewHighscore(false);\n      props.setView('home');\n    },\n    variant: \"ghost\",\n    color: \"black\",\n    _hover: {\n      border: 'none',\n      color: 'grey'\n    },\n    _focus: {\n      outline: 'none'\n    }\n  }, \"Cancel\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}